openapi: 3.0.3
servers:
- url: "http://localhost:3000"
info:
  title: WASAPhoto APIs
  description: |
    This OpenAPI document describes the apis for the WASAPhoto web application project.
  version: 3.0.1
tags:
  - name: Login
    description: User login function
  - name: User
    description: User functions
  - name: Ban
    description: Ban functions
  - name: Follow
    description: Follow functions
  - name: Photo
    description: Photo functions
  - name: Like
    description: Like functions
  - name: Comment
    description: Comment functions

paths:
  /session:
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              description: the object that contains the username
              type: object
              properties:
                name:
                  description: the username string
                  type: string
                  example: Maria
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                description: the object that contains the user id
                type: object
                properties:
                  identifier:
                    description: the user id
                    type: integer
                    example: 1234
                    minimum: 0
                    maximum: 1000000
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/InternalServerError"
     
  /users/{myUsername}/profiles/{profileUsername}:
    parameters: 
      - $ref: "#/components/parameters/myUsername"
      - $ref: "#/components/parameters/profileUsername"
    get:
      security: 
        - bearerAuth: []
      tags: ["User"]
      summary: Get the profile of a specific user
      description: | 
        If the searched username, given in the query, exists
        return the user profile in the response. The first username
        is used for authentication, while the second one is the searched
        profile username.
      operationId: getUserProfile
      responses:
        '200':
          description: |
            OK: user found
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  
  /users/{myUsername}/username:
    parameters: 
      - $ref: "#/components/parameters/myUsername"
    put: 
      security: 
        - bearerAuth: []
      tags: ["User"]
      summary: Modify your username
      description: |
        This function lets a user update their username. The new desired
        username must be sent in the requedt body.
      operationId: setMyUserName
      requestBody:
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/Username"
        required: true
      responses:
        '200':
          description: Username updated
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
        
  /users/{myUsername}/stream:
    parameters: 
      - $ref: "#/components/parameters/myUsername"
    get:
      security: 
        - bearerAuth: []
      tags: ["User"]
      summary: Get the a user's stream
      description: |
        This is used to retrieve the logged-in user's stream by showing
        photos of other followed users in reverse chronological order.
        Photos of banned users will not be shown.
      operationId: getMyStream
      responses:
        '200':
          description: Stream retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stream"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"

  /users/{myUsername}/bans:
    parameters: 
      - $ref: "#/components/parameters/myUsername"
      
    get:
      security: 
        - bearerAuth: []
      tags: ["Ban"]
      operationId: getBans
      summary: Get the list of banned users
      description: |
        This function will return the logged-in user's list of banned users
      responses:
        '200':
          description: Bans list successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BanList"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"

    post:
      security: 
        - bearerAuth: []
      tags: ["Ban"]
      operationId: banUser
      summary: Add a user to the banned users list
      description: |
        This function is used to ban a user by specifying the username of
        the person you want to ban in the request body
      requestBody:
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/Username"
      responses:
        "204":
          description: User banned successfully.
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
     
  /users/{myUsername}/bans/{bannedUsername}:
    parameters:
      - $ref: "#/components/parameters/myUsername"
      - $ref: "#/components/parameters/bannedUsername"
    delete:
      security: 
        - bearerAuth: []
      tags: ["Ban"]
      operationId: unbanUser
      summary: Unban a user
      description: |
        This function will remove a person from the ban list making it unbanned.
        The username of the person to unban must be specified in the path
      responses:
        '204':
          description: user unbanned successfully
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
            
  /users/{myUsername}/follows:
    parameters: 
      - $ref: "#/components/parameters/myUsername"
    post:
      security: 
        - bearerAuth: []
      tags: ["Follow"]
      operationId: followUser
      summary: Start following a user
      description: |
        This function is used to start following a user. The username of the
        person to follow must be specified in the request body
      requestBody:
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/Username"
      responses:
        '204':
          description: User followed successfully
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
     
  /users/{myUsername}/follows/{followedUsername}:
    parameters: 
      - $ref: "#/components/parameters/myUsername"
      - $ref: "#/components/parameters/followedUsername"
    delete:
      security: 
        - bearerAuth: []
      tags: ["Follow"]
      operationId: unfollowUser
      summary: Stop following a user
      description: |
        This will be used to stop following a user by deleting it from the
        followed users list. The username of the person to unfollow must be
        specified in the path.
      responses:
        "204":
          description: User unfollowed successfully
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  
  /users/{myUsername}/photos:
    parameters:
      - $ref: "#/components/parameters/myUsername"
    post:
      security: 
        - bearerAuth: []
      tags: ["Photo"]
      operationId: uploadPhoto
      summary: Upload a new photo
      description: |
        This function is used to upload a new photo. The image must be passed
        inside the request body.
      requestBody:
        content:
          image/*:
            schema:
              description: Image file
              type: object
              properties:
                 file:
                  description: the image file uploaded by the user
                  type: string
                  format: binary
                  minLength: 0
                  maxLength: 17179869184
      responses:
        '201':
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhotosList"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
    
  /users/{myUsername}/photos/{photoID}:
    parameters: 
      - $ref: "#/components/parameters/myUsername"
      - $ref: "#/components/parameters/photoID"
    delete:
      security: 
        - bearerAuth: []
      tags: ["Photo"]
      operationId: deletePhoto
      summary: Delete a photo
      description: |
        Delete a photo by specifying the id of the photo to delete in the path
      responses:
        '200':
          description: Photo deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhotosList"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
          
  /users/{myUsername}/photos/{photoID}/likes/:
    parameters:
      - $ref: "#/components/parameters/myUsername"
      - $ref: "#/components/parameters/photoID"
      
    get:
      security: 
        - bearerAuth: []
      tags: ["Like"]
      operationId: getLikes
      summary: Get the list of likes under a photo
      description: |
        This function will return the list of people who liked the photo. The id
        of the photo of which you want to retrieve the likes must be specified in
        the path.
      responses:
        '200':
          description: list of likes retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LikesList"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
    
    post:
      security: 
        - bearerAuth: []
      tags: ["Like"]
      operationId: likePhoto
      summary: Like a photo
      description: |
        This function is used to like the photo with the photo id specified in
        the path
      responses:
        '201':
          description: Photo liked successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LikesList"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"

  /users/{myUsername}/photos/{photoID}/likes/{likeID}:
    parameters:
      - $ref: "#/components/parameters/myUsername"
      - $ref: "#/components/parameters/photoID"
      - $ref: "#/components/parameters/likeID"
    delete:
      security: 
        - bearerAuth: []
      tags: ["Like"]
      operationId: unlikePhoto
      summary: Unlike a photo
      description: | 
        Unlike a photo you previously liked by specifying the like id in the path
      responses:
        '201':
          description: Photo unliked successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LikesList"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
    
  /users/{myUsername}/photos/{photoID}/comments/:
    parameters:
      - $ref: "#/components/parameters/myUsername"
      - $ref: "#/components/parameters/photoID"
    post:
      security: 
        - bearerAuth: []
      tags: ["Comment"]
      operationId: commentPhoto
      summary: Comment a photo
      description: |
        Comment the photo specified by the photo id in the path. The content of
        the comment must be passed insied the requst body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        '201':
          description: commented successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentsList"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
      
    get:
      security: 
        - bearerAuth: []
      tags: ["Comment"]
      operationId: getComments
      summary: Get the comments under a photo
      description: |
        Retrieve the array of comments under the photo specified by the photo id
        in the path.
      responses:
        '200':
          description: list of likes retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentsList"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"

  /users/{myUsername}/photos/{photoID}/comments/{commentID}:
    parameters:
      - $ref: "#/components/parameters/myUsername"
      - $ref: "#/components/parameters/photoID"
      - $ref: "#/components/parameters/commentID"
    delete:
      security: 
        - bearerAuth: []
      tags: ["Comment"]
      operationId: uncommentPhoto
      summary: Delete your comment from a photo
      description: |
        Delete a comment you previously posted under a photo. The comment id and
        the photo id are specified in the path.
      responses:
        '200':
          description: comment delete successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentsList"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"

components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  responses:
    BadRequest:
      description: |
        The server cannot understand or process 
        correctly the request
    InternalServerError:
      description: |
        The server encountered an unexpected condition 
        that prevented it from fulfilling the request
    UnauthorizedError:
      description: |
        You don't have the permissio for this request
    NotFoundError:
      description: |
        Can't find what you are looking for
  
  schemas:
    Username:
      description: "The unique username string of an account"
      type: object
      properties:
        name:
          description: the username string
          type: string
          example: ObiWan_Kenobi
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
      
    Photo:
      description: |
        A photo object containing the photo id, the number of
        likes, 
      type: object
      properties:
        photoID:
          $ref: "#/components/schemas/ID"
        photoData:
          description: the actual image data
          type: string
          format: binary
          minLength: 0
          maxLength: 17179869184
        whoPosted:
          $ref: "#/components/schemas/Username"
        date:
          description: date of upload
          type: string
          format: date-time
          example: '2024-05-04T09:12:28Z'
          minLength: 1
          maxLength: 9999
        likesCount:
          $ref: "#/components/schemas/Count"
        commentsCount:
          $ref: "#/components/schemas/Count"
          
    Comment:
      description: | 
        A comment object with its id, its author and the text content
      type: object
      properties:
        commmentID:
          $ref: "#/components/schemas/ID"
        author:
          $ref: "#/components/schemas/Username"
        content:
          description: "the comment text content"
          type: string
          example: WOW! This is such a nice comment :)
          minLength: 0
          maxLength: 10000
          pattern: '^.+$'
          
    Like:
      description: | 
        A like object with an id, the username of the 
        person who liked and the id of the liked photo
      type: object
      properties:
        likeID:
          $ref: "#/components/schemas/ID"
        userWhoLiked:
          $ref: "#/components/schemas/Username"
        photoID:
           $ref: "#/components/schemas/ID"
    
    User:
      type: object
      title: User
      description: | 
        The user profile made of the username, the followers and 
        following counts, the number of posts
      properties:
        ID:
          allOf: 
            - $ref: "#/components/schemas/ID"
          readOnly: true
        Username:
          $ref: "#/components/schemas/Username"
        PostsCount:
          $ref: "#/components/schemas/Count"
          
    Stream:
      description: | 
        The stream array that contains photos of users
        you follow
      type: array
      items:
        $ref: "#/components/schemas/Photo"
      minItems: 0
      maxItems: 10000

    ID:
      description: |
        The integer id schema used for different objects like users, photos, comments,
        likes, bans and follows.
      type: integer
      example: 1234
      minimum: 0
      maximum: 1000000
      
    Count:
      description: "count schema used to count followers, comments, likes and posts"
      type: integer
      example: 42
      minimum: 0
      maximum: 1000000
      
    PhotosList:
      description: "The list of photos posted by a user"
      type: array
      items:
        $ref: "#/components/schemas/Photo"
      minItems: 0
      maxItems: 10000

    BanList:
      description: "The list of banned users"
      type: object
      properties:
        bans:
          description: "the bans array"
          type: array
          items:
            type: object
            description: "made of the ban object id and the username of banned user"
            properties:
              ID:
                $ref: "#/components/schemas/ID"
              bannedUsername:
                $ref: "#/components/schemas/Username"
          minItems: 0
          maxItems: 10000
      
    LikesList:
      description: "The list of likes on a photo"
      type: array
      items:
        $ref: "#/components/schemas/Like"
      minItems: 0
      maxItems: 10000

    CommentsList:
      description: "The list of comments under a photo"
      type: array
      items:
        $ref: "#/components/schemas/Comment"
      minItems: 0
      maxItems: 10000
          
  parameters:
    myUsername:
      schema:
        $ref: "#/components/schemas/Username"
      name: myUsername
      in: path
      required: true
      description: "the username of the logged in user"
  
    profileUsername:
      schema:
        $ref: "#/components/schemas/Username"
      name: profileUsername
      in: path
      required: true
      description: "the profile's username to get"
      
    followedUsername:
      schema:
        $ref: "#/components/schemas/Username"
      name: followedUsername
      in: path
      required: true
      description: "The username of a user to unfollow."

    bannedUsername:
      schema:
        $ref: "#/components/schemas/Username"
      name: bannedUsername
      in: path
      required: true
      description: "banID: id of a user-bannedUsername object."

    photoID:
      schema:
        $ref: "#/components/schemas/ID"
      name: photoID 
      in: path
      required: true
      description: "photoID: id of a specific photo."
    
    commentID:
      schema:
        $ref: "#/components/schemas/ID"
      name: commentID
      in: path
      required: true
      description: "commentID: id of a comment under a photo."

    likeID:
      schema:
        $ref: "#/components/schemas/ID"
      name: likeID
      in: path
      required: true
      description: "likeID: id of a like on a photo."